managed implementation in class zbp_dxc_shb_m_travel unique;
///run RAP in strict mode, guidelines will apply
strict ( 2 );
//add draft feature at BO level
with draft;
define behavior for ZDXC_SHB_M_TRAVEL alias Travel
//table name where rap insert,update,delete data for us
persistent table /dmo/travel_m
///Make the lock based on travel entity
lock master
//mandatory to use total etag
total etag LastChangedAt

///Security of application data/opr like who is allowed to create,update,delete
authorization master ( instance )
//specify the draft table - will created by the rap framework
draft table zdxc_shb_dtravel

etag master LastChangedAt
early numbering
{
 create ( precheck );
 update ( precheck );
 delete;
 field ( readonly ) TravelId;
 field ( mandatory ) BeginDate, EndDate, AgencyId,CustomerId;
 internal action reCalcTotalPrice;
 //Adding side-effect which inform RAP to reaload the total price if the booking
 //fee has been changed on the Frontend
 side effects {
   field BookingFee affects field TotalPrice;
 }
 validation validateHeaderData on save {create; field CustomerId, BeginDate, EndDate;}

 determination calculateprice on modify
   {create; field BookingFee , CurrencyCode;}

 factory action copyTravel [1];

 //non factory actions which will change the state of the BO instance
 //this feature is to reject and approve the state of entity
 action (features : instance) acceptTravel result[1] $self;
 action (features : instance) rejectTravel result[1] $self;

 //adding the draft actions
 draft determine action Prepare;
 draft action Edit;
 draft action Resume;
 draft action Activate;
 draft action Discard;
 association _Bookings { create (features : instance); with draft; }
// association _Bookings { create (features : instance ); }
 mapping for /dmo/travel_m{
   TravelId = travel_id;
   AgencyId = agency_id;
   CustomerId = customer_id;
   BeginDate = begin_date;
   EndDate = end_date;
   TotalPrice = total_price;
   BookingFee = booking_fee;
   CurrencyCode = currency_code;
   Description = description;
   OverallStatus = overall_status;
   CreatedBy = created_by;
   CreatedAt = created_at;
   LastChangedBy = last_changed_by;
   LastChangedAt = last_changed_at;
 }
}
define behavior for ZDXC_SHB_M_BOOKING alias Booking
implementation in class zcl_dxc_shb_booking unique
persistent table /dmo/booking_m
lock dependent by _Travel
draft table zdxc_shb_bdraft
authorization dependent by _Travel
etag master LastChangedAt
early numbering
{
 update;
 delete;
 field ( readonly ) TravelId, BookingId;
 field ( mandatory ) CarrierId, ConnectionId, FlightDate;
 association _Travel;
 association _Supplement { create; with draft;}
// determination calculateTotalprice on modify
//    {create; field FlightPrice, CurrencyCode;}
 mapping for /dmo/booking_m{
   TravelId = travel_id;
   BookingId = booking_id;
   BookingDate = booking_date;
   BookingStatus = booking_status;
   CarrierId = carrier_id;
   ConnectionId = connection_id;
   FlightDate = flight_date;
   FlightPrice = flight_price;
   CurrencyCode = currency_code;
   CustomerId = customer_id;
   LastChangedAt = last_changed_at;
 }
}
define behavior for ZDXC_SHB_M_BOOKING_SUPPL alias BookingSuppl
persistent table /dmo/booksuppl_m
lock dependent by _Travel
authorization dependent by _Travel
draft table zdxc_shb_bsdraft
//etag master <field_name>
early numbering
{
 update;
 delete;
 field ( readonly ) TravelId, BookingId, BookingSupplementId;
 // BookingSupplementId;
 association _Travel;
 association _Booking;
 mapping for /dmo/booksuppl_m{
   BookingId = booking_id;
   TravelId = travel_id;
   BookingSupplementId = booking_supplement_id;
   SupplementId = supplement_id;
   Price = price;
   CurrencyCode = currency_code;
   LastChangedAt = last_changed_at;
 }
}